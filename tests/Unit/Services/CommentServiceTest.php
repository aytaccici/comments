<?php

namespace Tests\Unit\Services;

use App\Contracts\CommentContract;
use App\Contracts\PostContract;
use App\Exceptions\PostNotFoundException;
use App\Models\Comment;
use App\Models\Post;
use App\Repositories\CommentRepository;
use App\Repositories\PostRepository;
use App\Services\CommentService;
use App\Services\PostService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Pagination\LengthAwarePaginator;
use Tests\TestCase;

class CommentServiceTest extends TestCase
{
    use RefreshDatabase;

    protected $commentContract;
    protected $commentService;
    protected $config;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->commentContract= app()->bind(CommentContract::class, CommentRepository::class);
        $this->commentService = app()->make(CommentService::class);

    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_it_comment_created_successfully()
    {
        $postCount = 1;
        $post =Post::factory($postCount)
            ->create();

        $comment =Comment::factory($postCount)
            ->make([
                'post_id' => data_get($post->first(),'id')
            ]);

        $result =$this->commentService->store($comment->first()->toArray());
        $this->assertDatabaseHas('comments',[
            'id' => data_get($result,'id')
        ]);
    }


    public function test_it_throw_exception_when_post_not_found_for_comment()
    {
        $this->expectException(PostNotFoundException::class);
        $postCount = 1;

        $comment =Comment::factory($postCount)
            ->make([
                'post_id' => rand(1000,9999),
            ]);

        $result =$this->commentService->store($comment->first()->toArray());
        $this->assert('comments',[
            'id' => data_get($result,'id')
        ]);

        $this->expectExceptionCode(404);
    }
}
